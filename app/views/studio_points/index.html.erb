<%- model_class = StudioPoint -%>



<style>
    #map-canvas {
        width: 800px;
        height: 600px;
    }

</style>

<script>
    var token;
    $.ajax({
        type: "POST",
        url: "https://authserverqa.bluebeam.com/auth/token",
        data: "grant_type=password&username=bbsanitytest@gmail.com&password=bb123456",
        success: function(data, textStatus, jqXHR)
        {
            token = data.access_token;
            console.log(token);
//           console.log(data);
            //data - response from server
        },

    });
    //console.log(JSON.stringify(token));
</script>

<script>
    function initialize() {
//
        var markers = [];
        var mapCanvas = document.getElementById('map-canvas');

        var mapOptions = {
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(mapCanvas, mapOptions);


        // Create the search box and link it to the UI element.
        var input = /** @type {HTMLInputElement} */(
                document.getElementById('pac-input'));
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

//        alert(input);
        var searchBox = new google.maps.places.SearchBox((input));

        // Listen for the event fired when the user selects an item from the
        // pick list. Retrieve the matching places for that item.
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            for (var i = 0, marker; marker = markers[i]; i++) {
                marker.setMap(null);
            }

            // For each place, get the icon, place name, and location.
            markers = [];
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0, place; place = places[i]; i++) {

                bounds.extend(place.geometry.location);
            }

            map.fitBounds(bounds);
            map.setZoom(12);
        });



        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var pos = new google.maps.LatLng(position.coords.latitude,
                        position.coords.longitude);

                var infowindow = new google.maps.InfoWindow({
                    map: map,
                    position: pos
                    //  content: 'Location found using HTML5.'
                });

                map.setCenter(pos);
                addMarkers(map);
            }, function() {
                handleNoGeolocation(true);
            });
        } else {
            // Browser doesn't support Geolocation
            handleNoGeolocation(false);
        }


    }

    function addMarkers(map){

        var markers = [];
// id, latLng, innerHtmlArray, divClassName, zIndex, leftOffset, topOffset
        var infowindow = new google.maps.InfoWindow();
        <% @studio_points.each_with_index do |studio_point, i| %>

        var query = "https://studioapi-sandbox.bluebeam.com:443/PublicAPI/v1/sessions";
        var api_key = "?api_key="+token;

        //console.log(token);

        $.ajax({
//            beforeSend: function(request) {
//                request.setRequestHeader("Authorization", "bearer " + token);
//                console.log(request);
//            },
            url: (query+api_key),
            method: "GET",
            crossDomain: true,
//                dataType: 'jsonp',

            success: function(data) {
                console.log(JSON.stringify(data));
                console.log(data.Sessions[0].Name);


                console.log("Add Markers");
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(<%=studio_point.lat%>, <%=studio_point.lon%>),
                    map: map,
                    icon: "assets/BBPin.png"
                });

                google.maps.event.addListener(marker, 'click', function() {
                    infowindow.setContent('<a href="studio_points/<%=studio_point.id%>" >'+ data.Sessions[<%=i%>].Name +'</a>');
                    infowindow.open(marker.get('map'), marker);
                });
                markers.push(marker);



            },


        });



//        $.ajax({
//            type: "GET",
//            crossDomain: true,
//            dataType: 'jsonp',
//            url: request,
//            beforesend: function(request) {
//            request.setRequestHeader("Authorization", "bearer " + token);
//            },
//            success: function(data)
//            {

//                console.log(data);
//           console.log(data);
        //data - response from server




        <%end%>
    }

    function handleNoGeolocation(errorFlag) {
        if (errorFlag) {
            var content = 'Error: The Geolocation service failed.';
        } else {
            var content = 'Error: Your browser doesn\'t support geolocation.';
        }

        var options = {
            map: map,
            position: new google.maps.LatLng(60, 105),
            content: content
        };


        map.setCenter(options.position);

    }
    google.maps.event.addDomListener(window, 'load', initialize);
</script>
<div class="page-header">
  <h1><%=t '.title', :default => StudioPoint %></h1>
</div>
<table class="table table-striped">
  <thead>
    <tr>
      <th>ID</th>
      <th><%= model_class.human_attribute_name(:lat) %></th>
      <th><%= model_class.human_attribute_name(:lon) %></th>
      <th><%= model_class.human_attribute_name(:studio_id) %></th>
      <th><%= model_class.human_attribute_name(:street) %></th>
      <th><%= model_class.human_attribute_name(:city) %></th>
      <th><%= model_class.human_attribute_name(:zip) %></th>
      <th><%= model_class.human_attribute_name(:state) %></th>
      <th><%= model_class.human_attribute_name(:created_at) %></th>
      <th><%=t '.actions', :default => t("helpers.actions") %></th>
    </tr>
  </thead>
  <tbody>
    <% @studio_points.each do |studio_point| %>
      <tr>
        <td><%= studio_point.id %></td>
        <td><%= studio_point.lat %></td>
        <td><%= studio_point.lon %></td>
        <td><%= studio_point.studio_id %></td>
        <td><%= studio_point.street %></td>
        <td><%= studio_point.city %></td>
        <td><%= studio_point.zip %></td>
        <td><%= studio_point.state %></td>
        <td><%=l studio_point.created_at, format: :long %></td>
        <td>
          <%= link_to studio_point_path(studio_point), :class => 'btn btn-xs', :title => "#{ t('.show', :default => t('helpers.links.show')) }" do %>
            <%= glyph 'info-sign' %>
            <%= glyph 'pencil' %>
          <%- end -%>
          <%= link_to studio_point_path(studio_point), :method => :delete, :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) }, :class => 'btn btn-xs', :title => "#{ t('.destroy', :default => t('helpers.links.destroy')) }" do %>
            <%= glyph 'remove' %>
          <%- end -%>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= link_to t('.new', :default => t("helpers.links.new")),
            new_studio_point_path,
            :class => 'btn btn-primary' %>
